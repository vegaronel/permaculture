<%- include("partials/UserHeader.ejs") %>




  <div class="container d-flex row" style="height: 100%;">
    <div class="upload-container col-lg-8 col-md-12">

      <% if (error) { %>
        <div class="alert alert-danger" role="alert">
          <%= error %>
        </div>
      <% } %>

    <div class="d-flex flex-lg-row flex-md-row flex-column-reverse gap-2 p-4">
     
      <form action="/plant-identification" method="POST" enctype="multipart/form-data" class="upload-form d-flex flex-column gap-3" style="width: 100%; max-width: 230px;">
        <!-- Take Photo Section -->
        <div>
          <button type="button" id="take-photo" class="btn picture-btn py-2">Take Photo</button>
        </div>

        <!-- Choose Image from File -->
        <div>
          <label for="file-upload" class="custom-file-upload btn py-2">
            Choose Image
            <input id="file-upload" type="file" name="plantImage" accept="image/*">
          </label>
        </div>
        <!-- Submit Button -->
        <div>
          <button type="submit" class="btn picture-btn py-2">Identify</button>
        </div>
      </form>

       <!-- Video Stream for Camera -->
       <div>
        <video class="camera-preview" id="camera" autoplay style=" display: none;"></video>
        <canvas id="photo-canvas" style="display: none;"></canvas>
      </div>
 
   
      <!-- Hidden Input to Store Captured Photo -->
      <input type="hidden" name="capturedImage" id="capturedImage">

      <div class="camera-image-preview d-flex flex-column-reverse ">
        <!-- Image Preview and Camera view -->
        <img id="image-preview" class="image-preview" alt="Image Preview" style="display:none; max-width: 100%; margin-top: 10px;">
        <button type="button" id="switch-camera" class="p-2" style="display: none; background-color: #4ECB71;color: white; border: rgb(216, 216, 216);"><small>Switch Camera</small></button>

      </div>
      

    </div>


  <nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">
      <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-plant-identify" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Identification</button>
      <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-plant-disease" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Disease Detection</button>
    </div>
  </nav>

  <% if (plantName) { %>
  
  <div class="tab-content" id="nav-tabContent">
    <div class="tab-pane fade show active" id="nav-plant-identify" role="tabpanel" aria-labelledby="nav-home-tab" tabindex="0">
      <h2>Plant Identification</h2>
      <img class="image-preview" src="<%= imagePath %>" alt="Uploaded plant image" />
      <p><strong>Plant Name:</strong> <%= plantName %></p>
      <p><strong>Common Names:</strong> <%= commonNames.join(', ') %></p>
      <p><strong>Description:</strong> <%= description %></p>
    </div>

    <!-- Disease Detection Tab -->
    <div class="tab-pane fade" id="nav-plant-disease" role="tabpanel" aria-labelledby="nav-profile-tab" tabindex="0">
      <h2>Disease Detection</h2>
      <% if (diseases.length > 0) { %>
        <% diseases.forEach(disease => { %>
          <div class="disease">
            <p class="h5"><%= disease.name %> (Probability: <%= (disease.probability * 100).toFixed(2) %>%)</p>
            <p><strong>Description:</strong> <%= disease.description %></p>
            <p><strong>Treatment:</strong> <%= disease.treatment %></p>
          </div>
        <% }); %>
      <% } else { %>
        <p>No diseases detected.</p>
      <% } %>
    </div>
  </div>

  <% }else{ %>
      <p>No data available</p>
  <% } %>


    </div>

<!-- CHATBOT -->
    <div class="chat-bot-container col-md-12 col-lg-4" style="min-width: 400px;">

          <div class="chat-container" id="chat-container">
            <div class="chat-messages d-flex flex-column" id="chat-messages">
              <div id="predefined-options" class="d-flex flex-wrap gap-2">
                <button class="option-button" data-option="Can you suggest a care tips for this plant <%= plantName %>">Care tips</button>
                <button class="option-button" data-option="What are common diseases for this plant <%= plantName %>?">Common Plant Diseases</button>
                <button class="option-button" data-option="How much water does this plant <%= plantName %> need?">Watering Requirements</button>
              </div>
            </div>
            <div class="chat-input d-flex align-items-center gap-2">
              <input class="m-0" type="text" id="chat-input" placeholder="Type a message...">
              <button id="send-button" class="btn">Send</button>
            </div>
          </div>

    </div>
  </div>





      

    </main>
</div>


<%- include("partials/UserFooter.ejs") %>

  
      

<script>
  $(document).ready(function () {
    const $takePhotoBtn = $('#take-photo');
    const $switchCameraBtn = $('#switch-camera');
    const $video = $('#camera');
    const $canvas = $('#photo-canvas');
    const $imagePreview = $('#image-preview');
    const $capturedImageInput = $('#capturedImage');
    const $fileUpload = $('#file-upload');
    const $cameraImagePreview = $('.camera-image-preview');

    let stream;
    let isCameraActive = false;
    let currentFacingMode = 'environment'; // Default to rear camera

    // Take Photo button click handler
    $takePhotoBtn.on('click', function () {
        if (!isCameraActive) {
            startCamera();
        } else {
            capturePhoto();
        }
    });

    // Start camera function
    function startCamera() {
        const constraints = {
            video: {
                facingMode: currentFacingMode // Use front or rear camera based on the current setting
            }
        };

        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia(constraints)
                .then(videoStream => {
                    stream = videoStream;
                    $video[0].srcObject = stream;
                    $video.show();
                    $imagePreview.hide();
                    $cameraImagePreview.append($video);
                    isCameraActive = true;
                    $takePhotoBtn.text('Capture Photo');
                    $switchCameraBtn.show(); // Show switch camera button when camera is active
                })
                .catch(err => console.error("Error accessing camera: ", err));
        }
    }

    // Capture photo function
    function capturePhoto() {
        $canvas[0].width = $video[0].videoWidth;
        $canvas[0].height = $video[0].videoHeight;
        $canvas[0].getContext('2d').drawImage($video[0], 0, 0, $canvas[0].width, $canvas[0].height);

        const imageData = $canvas[0].toDataURL('image/png');
        $imagePreview.attr('src', imageData).show();
        $video.hide();
        $capturedImageInput.val(imageData);

        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }

        isCameraActive = false;
        $takePhotoBtn.text('Take Photo');
        $switchCameraBtn.hide(); // Hide switch camera button when camera is stopped
    }

    // Switch camera handler
    $switchCameraBtn.on('click', function () {
        // Switch between front and rear camera
        currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
        if (isCameraActive) {
            // Stop the current stream and restart the camera with the new facing mode
            stream.getTracks().forEach(track => track.stop());
            startCamera();
        }
    });

    // File upload handler
    $fileUpload.on('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                $imagePreview.attr('src', e.target.result).show();
                $video.hide();
                $capturedImageInput.val('');  // Clear any previously captured image
            };
            reader.readAsDataURL(file);
        }
    });

    const $messagesContainer = $('#chat-messages');
    const $predefinedOptions = $('#predefined-options');

    // Handle predefined option clicks
    $predefinedOptions.on('click', '.option-button', async function () {
        const $button = $(this);
        const option = $button.data('option');
        const message = $button.text();

        // Display user's message
        const userMessage = $('<div>').addClass('message sent').html(`<p class="fsize-13">${message}</p><span class="timestamp">${new Date().toLocaleTimeString()}</span>`);
        $messagesContainer.append(userMessage);
        $predefinedOptions.hide();

        // Send the selected option to the server
        try {
            const response = await fetch('/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ content: option })
            });

            const data = await response.json();

            // Display bot's message
            const botMessage = $('<div>').addClass('message received').html(`<p class="fsize-13">${data.response}</p><span class="timestamp">${new Date().toLocaleTimeString()}</span>`);
            $messagesContainer.append(botMessage);
            $messagesContainer.scrollTop($messagesContainer[0].scrollHeight);
        } catch (error) {
            console.error('Error:', error);
        }
    });

    const updateOptionsVisibility = () => {
        if ($messagesContainer.children().length === 0) {
            $predefinedOptions.show();
        } else {
            $predefinedOptions.hide();
        }
    };

    updateOptionsVisibility();

    // Send button handler
    $('#send-button').on('click', async function () {
        const $input = $('#chat-input');
        const message = $input.val().trim();
        if (!message) return;

        // Display user's message
        const userMessage = $('<div>').addClass('message sent').html(`<p class="fsize-13">${message}</p><span class="timestamp">${new Date().toLocaleTimeString()}</span>`);
        $messagesContainer.append(userMessage);
        $input.val('');
        $messagesContainer.scrollTop($messagesContainer[0].scrollHeight);
        $predefinedOptions.hide();

        // Send the message to the server
        try {
            const response = await fetch('/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ content: message })
            });

            const data = await response.json();

            // Display bot's message
            const botMessage = $('<div>').addClass('message received').html(`<p class="fsize-13">${data.response}</p><span class="timestamp">${new Date().toLocaleTimeString()}</span>`);
            $messagesContainer.append(botMessage);
            $messagesContainer.scrollTop($messagesContainer[0].scrollHeight);

            updateOptionsVisibility();
        } catch (error) {
            console.error('Error:', error);
        }
    });

    // Minimize button handler
    $('#minimize-button').on('click', function () {
        $('#chat-container').toggleClass('minimized');
    });

    // Close button handler
    $('#close-button').on('click', function () {
        $('#chat-container').hide();
    });
});

    </script>