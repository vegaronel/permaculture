<%- include("partials/UserHeader.ejs") %>




  <div class="container-fluid hidden-scroll">
    <div class="upload-container col-lg-8 col-md-12 hidden-scroll">

      <% if (error) { %>
        <div class="alert alert-danger" role="alert">
          <%= error %>
        </div>
      <% } %>

    <div class="d-flex flex-lg-row flex-md-row flex-column-reverse gap-2 p-4">
     
      <form action="/plant-identification" method="POST" enctype="multipart/form-data" class="upload-form d-flex flex-column gap-3" style="width: 100%; max-width: 230px;">
        <!-- Take Photo Section -->
        <div>
          <button type="button" id="take-photo" class="btn picture-btn py-2">Take Photo</button>
        </div>

        <!-- Choose Image from File -->
        <div>
          <label for="file-upload" class="custom-file-upload btn py-2">
            Choose Image
            <input id="file-upload" type="file" name="plantImage" accept="image/*">
          </label>
        </div>
        <!-- Submit Button -->
        <div>
          <button type="submit" class="btn picture-btn py-2">Identify</button>
        </div>
         <!-- Hidden Input to Store Captured Photo -->
        <input type="hidden" name="capturedImage" id="capturedImage">
      </form>

       <!-- Video Stream for Camera -->
       <div>
        <video class="camera-preview" id="camera" autoplay style=" display: none;"></video>
        <canvas id="photo-canvas" style="display: none;"></canvas>
      </div>
 
   
     

      <div class="camera-image-preview d-flex flex-column-reverse ">
        <!-- Image Preview and Camera view -->
        <img id="image-preview" class="image-preview" alt="Image Preview" style="display:none; max-width: 100%; margin-top: 10px;">
        <button type="button" id="switch-camera" class="p-2" style="display: none; background-color: #4ECB71;color: white; border: rgb(216, 216, 216);"><small>Switch Camera</small></button>

      </div>
      

    </div>


  <nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">
      <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-plant-identify" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Identification</button>
      <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-plant-disease" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Disease Detection</button>
    </div>
  </nav>

  <% if (plantName) { %>
  
  <div class="tab-content" id="nav-tabContent">
    <div class="tab-pane fade show active" id="nav-plant-identify" role="tabpanel" aria-labelledby="nav-home-tab" tabindex="0">
      <h2>Plant Identification</h2>
      <img class="image-preview" src="<%= imagePath %>" alt="Uploaded plant image" />
      <p><strong>Plant Name:</strong> <%= plantName %></p>
      <p><strong>Common Names:</strong> <%= commonNames.join(', ') %></p>
      <p><strong>Description:</strong> <%= description %></p>
    </div>

    <!-- Disease Detection Tab -->
    <div class="tab-pane fade" id="nav-plant-disease" role="tabpanel" aria-labelledby="nav-profile-tab" tabindex="0">
      <h2>Disease Detection</h2>
      <% if (diseases.length > 0) { %>
        <% diseases.forEach(disease => { %>
          <div class="disease">
            <p class="h5"><%= disease.name %> (Probability: <%= (disease.probability * 100).toFixed(2) %>%)</p>
            <p><strong>Description:</strong> <%= disease.description %></p>
            <p><strong>Treatment:</strong> <%= disease.treatment %></p>
          </div>
        <% }); %>
      <% } else { %>
        <p>No diseases detected.</p>
      <% } %>
    </div>
  </div>

  <% }else{ %>
      <p>No data available</p>
  <% } %>


    </div>

  </div>

  <style>

    
</style>
<div id="chatbot" class="chatbot">
  <div class="chat-header">
      <span class="chat-title">Chatbot</span>
      <div class="chat-controls">
          <button id="minimize-button">-</button>
          <button id="close-button">Ã—</button>
      </div>
  </div>
  <div class="chat-messages" id="chat-messages">
      <div id="predefined-options">
          <button class="option-button" data-option="Can you suggest care tips for this plant <%= plantName %>">Care tips</button>
          <button class="option-button" data-option="What are common diseases for this plant <%= plantName %>?">Common Plant Diseases</button>
          <button class="option-button" data-option="How much water does this plant <%= plantName %> need?">Watering Requirements</button>
      </div>
  </div>
  <div class="chat-input">
      <input type="text" id="chat-input" placeholder="Type a message...">
      <button id="send-button">Send</button>
  </div>
</div>
<button id="open-chatbot-button">Chat</button>
    </main>
</div>


<%- include("partials/UserFooter.ejs") %>

  
      <script>
        $(document).ready(function () {
    const $chatBotContainer = $('#chat-bot-container');
    const $openChatbotButton = $('#open-chatbot-button');
    const $closeButton = $('#close-button');

    // Open chatbot when the button is clicked
    $openChatbotButton.on('click', function () {
        $chatBotContainer.show();
        $openChatbotButton.hide();
    });

    // Close chatbot when the close button is clicked
    $closeButton.on('click', function () {
        $chatBotContainer.hide();
        $openChatbotButton.show();
    });
});

      </script>

<script>
  $(document).ready(function () {
    const $takePhotoBtn = $('#take-photo');
    const $switchCameraBtn = $('#switch-camera');
    const $video = $('#camera');
    const $canvas = $('#photo-canvas');
    const $imagePreview = $('#image-preview');
    const $capturedImageInput = $('#capturedImage');
    const $fileUpload = $('#file-upload');
    const $cameraImagePreview = $('.camera-image-preview');

    let stream;
    let isCameraActive = false;
    let currentFacingMode = 'environment'; // Default to rear camera

    // Take Photo button click handler
    $takePhotoBtn.on('click', function () {
        if (!isCameraActive) {
            startCamera();
        } else {
            capturePhoto();
        }
    });

    // Start camera function
    function startCamera() {
        const constraints = {
            video: {
                facingMode: currentFacingMode // Use front or rear camera based on the current setting
            }
        };

        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia(constraints)
                .then(videoStream => {
                    stream = videoStream;
                    $video[0].srcObject = stream;
                    $video.show();
                    $imagePreview.hide();
                    $cameraImagePreview.append($video);
                    isCameraActive = true;
                    $takePhotoBtn.text('Capture Photo');
                    $switchCameraBtn.show(); // Show switch camera button when camera is active
                })
                .catch(err => console.error("Error accessing camera: ", err));
        }
    }

    function capturePhoto() {
    $canvas[0].width = $video[0].videoWidth;
    $canvas[0].height = $video[0].videoHeight;
    const context = $canvas[0].getContext('2d');
    context.drawImage($video[0], 0, 0, $canvas[0].width, $canvas[0].height);

    const imageData = $canvas[0].toDataURL('image/png');
    $imagePreview.attr('src', imageData).show();
    $video.hide();
    $capturedImageInput.val(imageData);  // Store image in hidden input

    // Stop the camera stream
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }

    isCameraActive = false;
    $takePhotoBtn.text('Take Photo');
    $switchCameraBtn.hide();  // Hide switch camera button when camera is stopped
}


    // Switch camera handler
    $switchCameraBtn.on('click', function () {
        // Switch between front and rear camera
        currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
        if (isCameraActive) {
            // Stop the current stream and restart the camera with the new facing mode
            stream.getTracks().forEach(track => track.stop());
            startCamera();
        }
    });

    // File upload handler
    $fileUpload.on('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                $imagePreview.attr('src', e.target.result).show();
                $video.hide();
                $capturedImageInput.val('');  // Clear any previously captured image
            };
            reader.readAsDataURL(file);
        }
    });

  const $messagesContainer = $('#chat-messages');
const $predefinedOptions = $('#predefined-options');

$(document).ready(function() {
            const $chatbot = $('#chatbot');
            const $openChatbotButton = $('#open-chatbot-button');
            const $minimizeButton = $('#minimize-button');
            const $closeButton = $('#close-button');
            const $messagesContainer = $('#chat-messages');
            const $predefinedOptions = $('#predefined-options');
            const $chatInput = $('#chat-input');
            const $sendButton = $('#send-button');

            $minimizeButton.on('click', function() {
                $chatbot.toggleClass('minimized');
                $(this).text($chatbot.hasClass('minimized') ? '+' : '-');
            });

            $closeButton.on('click', function() {
                $chatbot.hide();
                $openChatbotButton.show();
            });

            $openChatbotButton.on('click', function() {
                $chatbot.show();
                $chatbot.removeClass('minimized');
                $minimizeButton.text('-');
                $(this).hide();
            });

            function updateOptionsVisibility() {
                if ($messagesContainer.children().length === 1) {
                    $predefinedOptions.show();
                } else {
                    $predefinedOptions.hide();
                }
            }

            $predefinedOptions.on('click', '.option-button', async function() {
                const option = $(this).data('option');
                const message = $(this).text();
                await sendMessage(message, option);
            });

            $sendButton.on('click', async function() {
                const message = $chatInput.val().trim();
                if (message) {
                    await sendMessage(message, message);
                }
            });

            $chatInput.on('keypress', async function(e) {
                if (e.which === 13) {
                    const message = $(this).val().trim();
                    if (message) {
                        await sendMessage(message, message);
                    }
                }
            });

            async function sendMessage(displayMessage, serverMessage) {
                appendMessage(displayMessage, 'sent');
                $chatInput.val('');
                updateOptionsVisibility();

                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ content: serverMessage })
                    });

                    const data = await response.json();
                    appendMessage(data.response, 'received');
                } catch (error) {
                    console.error('Error:', error);
                    appendMessage('Sorry, there was an error processing your request.', 'received');
                }
            }

            function appendMessage(content, type) {
                const $message = $('<div>')
                    .addClass(`message ${type}`)
                    .html(`<p>${content.replace(/\n/g, '<br>')}</p>`)
                    .appendTo($messagesContainer);

                $messagesContainer.scrollTop($messagesContainer[0].scrollHeight);
            }

            updateOptionsVisibility();
        });
});

    </script>