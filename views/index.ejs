<%- include("partials/UserHeader.ejs") %>

<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-messaging.js"></script>

<!-- Page Content -->
<div class="container-fluid hidden-scroll"> 
    <style>
        #token-display {
            word-break: break-all;
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
        }
    </style>
      <div id="notification-status"></div>
      <div id="token-display"></div>
    
    <section class="weather-section">
        <div class="row nexa-black gap-4 d-flex justify-content-center m-2">
            <div class="col-lg-7 d-flex gap-3 flex-column">
                <div class="p-4 center-items weather-card b-radius-50">
                    <div>
                        <div class="d-flex align-items-center">
                            <img src="images/location-icon.svg" alt="">
                            <p class="h2 fs-30 m-0">Vinzons, Camarines Norte</p>
                        </div>
                        <p class="arial fs-14"><strong><%= day %>,</strong>  <%= dateToday %></p>
                        <p class="fs-80"><%= Math.floor(weather.main.temp)  %>°</p>
                    </div>
                    <div>
                        <img src="images/weather-icons/<%= weatherIcon %>.svg" alt="Weather Icon" style="width: 100%; min-width: 170px;">
                    </div>
                </div>

                <div class="arial p-4 weather-card b-radius-50">
                    <div class="p-3">
                        <h3>5-Day Forecast</h3>
                    </div>
                    <div class="px-2 overflow-x-auto">                
                        <div class="forecast-container d-flex justify-content-around">
                            <% forecast.forEach(day => { %>
                                <div class="forecast-day d-flex justify-content-center flex-column align-items-center">
                                    <p><%= new Date(day.dt_txt).toLocaleDateString('en-US', { weekday: 'long' }) %></p>
                                    <img style="width: 100px; height: 100px; background-size: cover;" src="images/weather-icons/<%= day.weather[0].icon %>.svg" alt="Weather Icon">
                                    <p><%= Math.floor(day.main.temp) %> °C</p>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4 p-4 weather-card b-radius-50">
                <div class="d-flex align-items-center">
                    <img src="/images/todo-icon.svg" alt="">
                    <p class="m-0 gray-text todo-text">To do list</p>
                </div>
                <div class="px-4" style="height: 370px;overflow-y: scroll;">
                    <% if (tasks && tasks.length > 0) { %>
                        <ul class="list-group">
                            <% tasks.forEach(task => { %>
                                <li class="list-group-item d-flex flex-lg-row justify-content-between align-items-center flex-sm-column">
                                    <div>
                                        <strong><%= task.title %></strong><br>
                                        <small><%= task.description %></small>
                                    </div>
                                    <span class="badge badge-pill text-black">
                                        Due: <%= new Date(task.dueDate).toLocaleDateString('en-PH') %>
                                    </span>
                                    <button class="btn border complete-task-btn" data-id="<%= task._id %>">Done</button>
                                </li>
                            <% }) %>
                        </ul>
                    <% } else { %>
                        <p class="text-muted">No tasks to complete.</p>
                    <% } %>
                </div>
            </div>
        </div>    
    </section>

    <div id="successTaskNotification" class="alert alert-success d-none" role="alert" style="position: fixed; bottom: 20px; right: 20px; z-index: 1050;">
        Task Completed Successfully!
    </div>

    <section id="my-plants">
        <div class="row gap-4 mt-3 d-flex justify-content-center mx-2">
            <div class="col-lg-7 col-md-12 d-flex gap-3 flex-column">
                <div class="col p-4 weather-card b-radius-50 ">              
                    <div class="d-flex align-items-center mt-2">
                        <img src="/images/my-plants.svg" alt="">
                        <p class="h5 m-0">My Plants</p>
                    </div>

                    <div class="table-responsive">
                        <% if (plants && plants.length > 0) { %>
                            <table id="plantsTable" class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Plant Name</th>
                                        <th>Date Planted</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% plants.forEach(plant => { %>
                                        <tr>
                                            <td><img src="<%= plant.image %>" alt="" width="70px"></td>
                                            <td><%= plant.name %></td>
                                            <td><%= new Date(plant.plantingDate).toLocaleDateString('en-GB', {day: '2-digit', month: '2-digit', year: 'numeric'}) %></td>
                                            <td><%= plant.status %></td>            
                                            <td>
                                                <button class="btn btn-primary view-plant" data-custom-id="<%= plant.customId %>">View</button>

                                            </td>                             
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        <% } else { %>
                            <p>No plants found. Start by adding a new plant!</p>
                        <% } %>
                    </div>
                </div>
            </div>

            <div class="col-lg-4 col-md-12 p-4 weather-card b-radius-50">
                <div class="p-4">
                    <h5>Soil Moisture Data</h5>
                </div>
              
                <div id="soilMoistureContainer" style="overflow: scroll; height: 370px;" class="d-flex flex-column"></div>
            </div>
        </div>    
    </section>

    <!-- Modal -->
    <div class="modal fade" id="plantDetailsModal" tabindex="-1" aria-labelledby="plantDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered custom-modal-width">
        <div class="modal-content">
            <div class="modal-body p-5">
                <p class="nexa-black gray-text">Plant Information</p>
                <div class="d-flex justify-content-center flex-column text-center">
                    <p class="h-3 nexa-black gray-text">Plant Progress Tracking</p>
                    <p class="gray-text m-0">This tracking system utilizes estimated days before harvest and may vary from your actual plant</p>
            
                        <div class="d-flex align-items-center gap-4 my-2" style="width: 450px; margin: auto;">
                            <img src="/images/progress-bar-seed-icon.svg" alt="">
                            <div class="progress flex-grow-1" >
                                <div id="growthProgressBar" class="progress-bar" role="progressbar" style="width: 0%; background-color:#59A645 ;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                            </div>
                            <img style="position: relative; right: 30px;" src="/images/progress-bar-harvest-icon.svg" alt="">
                        </div>
                </div>
                <div class="d-flex row view-plant-model view-plant-model-inputs">
                    <div class="col d-flex justify-content-center align-items-center">
                        <img id="plantImage" src="" alt="Plant Image" class="img-fluid" width="100%" />
                    </div>
                    <div class="col">
                        <div class="d-flex gap-3">
                            <div class="">
                                <label for="" class="form-label">Plant Name</label>
                                <input class="form-control" id="plantName" type="text" value="" name="">
                            </div>
                            <div class="">
                                <label for="" class="form-label">Date Planted</label>
                                <input class="form-control" id="datePlanted" type="text" value="" name="">
                            </div>                    
                        </div>
                        <div class="d-flex gap-3">
                            <div>
                                <label for="" class="form-label">Soil Status</label>
                                <input class="form-control" id="soilStatus" type="text" value="" name="">
                            </div>
                            <div>
                                <label for="" class="form-label">Location</label>
                                <input class="form-control" id="plantLocation" type="text" value="" name="">
                            </div>
                        </div>
                        <div class="form-group d-flex gap-3">
                            <div>
                                <label for="harvestStatus" class="form-label">In case you want to Harvest</label>
                                <select name="harvestStatus" class="form-control" id="harvestStatus" style="width: 180px;">
                                    <option value="">Select Quality</option>
                                    <option value="Premium">Premium</option>
                                    <option value="Good">Good</option>
                                    <option value="Acceptable">Acceptable</option>
                                    <option value="Low">Low</option>
                                </select>
                            </div>
                            <div class="d-flex align-items-end">
                                <button class="btn border modal-plant-button text-white" id="harvestButton" style="width: 90px; background-color: #D9D9D9;">Harvest</button>
                            </div>        
                        </div>
                        <div class="form-group d-flex gap-3">
                            <div>
                                <label for="plantDied" class="form-label">In case the plant died</label>
                                <select name="plantDied" class="form-control" id="plantDied" style="width: 180px;">
                                    <option value="">Select Reason</option>
                                    <option value="Poor Soil Quality">Poor Soil Quality</option>
                                    <option value="Inadequate Watering">Inadequate Watering</option>
                                    <option value="Pests and Diseases">Pests and Diseases</option>
                                    <option value="Improper Sunlight and Temperature">Improper Sunlight and Temperature</option>
                                    <option value="Negligence">Negligence</option>
                                </select>
                            </div>
                            <div class="d-flex align-items-end">
                                <button class="btn btn-danger modal-plant-button" id="plantDiedButton" style="width: 90px;">Plant Died</button>
                            </div>        
                        </div>

                        <div class="">
                            <label for="" class="form-label">Method of Planting</label>
                            <input class="form-control" id="methodOfPlanting" type="text" value="" name="">
                        </div>
                    </div>
                </div>
            <div class="mt-4 d-flex justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Back</button>
            </div>
            </div>
        </div>
        </div>
    </div>
  <!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" style="z-index: 9999;" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to mark this plant as died?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmPlantDiedButton">Yes, Proceed</button>
            </div>
        </div>
    </div>
</div>
<div id="successNotification" class="alert alert-success d-none" role="alert" style="position: fixed; bottom: 20px; right: 20px; z-index: 1050;">
    Plant status updated successfully!
</div>

<!-- Harvest Confirmation Modal -->
<div class="modal fade" id="harvestConfirmationModal" style="z-index: 99999;" tabindex="-1" aria-labelledby="harvestConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="harvestConfirmationModalLabel">Confirm Harvest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to harvest this plant?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmHarvestButton">Yes, Harvest</button>
            </div>
        </div>
    </div>
</div>


<style>
    /* Gray overlay background */
    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent gray */
        z-index: 1040; /* Below the notification */
        display: none; /* Initially hidden */
    }

    /* Notification styles */
    #successHarvestNotification.show {
        opacity: 1;
    }

    #successHarvestNotification {
        opacity: 0;
        transition: opacity 0.5s;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1050;
        text-align: center;
        width: 300px;
    }
</style>

<!-- Gray overlay -->
<div id="overlay"></div>

<!-- Notification -->
<div id="successHarvestNotification" class="alert alert-success d-none shadow-lg rounded" role="alert">
    <img src="/images/Party.gif" alt="Plant Icon" style="width: 100px; height: 100px; margin-bottom: 10px;">
    <h5>Congratulations!</h5>
    <p>Your plant has been successfully harvested!</p>
</div>

  
<div id="successHarvestNotification" class="alert alert-success d-none shadow-lg rounded" role="alert" 
     style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1050; transition: all 0.5s; text-align: center; width: 300px;">
    <img src="/images/Party.gif" alt="Plant Icon">
    <h5>Congratulations!</h5>
    <p>Your plant has been successfully harvested!</p>
</div>


    

</div>
<!-- /#page-content-wrapper -->
</div>
<%- include("partials/UserFooter.ejs") %>

<script>
    // Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyCxmfWGdh_1oIuIZ-OFJ3hQI4jn5FiE_JM",
        authDomain: "soil-moisture-monitoring-1d52c.firebaseapp.com",
        databaseURL: "https://soil-moisture-monitoring-1d52c-default-rtdb.firebaseio.com",
        projectId: "soil-moisture-monitoring-1d52c",
        storageBucket: "soil-moisture-monitoring-1d52c.appspot.com",
        messagingSenderId: "425533189140",
        appId: "1:425533189140:web:09ad7931def112b1740b01",
        measurementId: "G-86ZGP33GW0"
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    const messaging = firebase.messaging();

    // Register the service worker
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/firebase-messaging-sw.js')
            .then((registration) => {
                console.log('Service Worker registered with scope:', registration.scope);
                // Now you can initialize messaging
                initializeFirebaseMessaging();
            })
            .catch((error) => {
                console.error('Service Worker registration failed:', error);
            });
    } else {
        console.error('Service workers are not supported in this browser.');
    }

    async function initializeFirebaseMessaging() {
        try {
            const permission = await Notification.requestPermission();
            if (permission === 'granted') {
                console.log('Notification permission granted.');
                const token = await messaging.getToken();
                console.log('FCM Token:', token);
                document.getElementById('token-display').textContent = `FCM Token: ${token}`;
                await sendTokenToServer(token);
                document.getElementById('notification-status').textContent = 'Notifications enabled';
            } else {
                console.log('Unable to get permission to notify.');
                document.getElementById('notification-status').textContent = 'Notifications disabled';
                document.getElementById('token-display').textContent = 'No token available - permission denied';
            }
        } catch (error) {
            console.error('Error initializing Firebase messaging:', error);
            document.getElementById('notification-status').textContent = 'Error initializing notifications';
            document.getElementById('token-display').textContent = `Error: ${error.message}`;
        }
    }

    // Function to send token to server
    async function sendTokenToServer(token) {
        try {
            const response = await fetch('/api/save-fcm-token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ token })
            });
            if (!response.ok) {
                throw new Error('Failed to save token');
            }
            console.log('Token successfully sent to server');
            document.getElementById('notification-status').textContent += ' - Token sent to server';
        } catch (error) {
            console.error('Error sending token to server:', error);
            document.getElementById('notification-status').textContent += ' - Failed to send token to server';
        }
    }

    // Handle incoming messages
    messaging.onMessage((payload) => {
        console.log('Message received. ', payload);
        // Display the notification
        const notificationTitle = payload.notification.title;
        const notificationOptions = {
            body: payload.notification.body,
            icon: '/path/to/icon.png' // Update with your icon path
        };
        new Notification(notificationTitle, notificationOptions);
    });

    // Initialize messaging when the page loads
    document.addEventListener('DOMContentLoaded', () => {
        // Only initialize messaging after service worker registration
    });
</script>


<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const userId = '<%= userId %>'; // Get the userId from the server-side render
    socket.on('soilMoistureUpdate', (data) => {
    const $container = $('#soilMoistureContainer');
    if (!$container.length) return;

    $.each(data, (sensorId, sensorData) => {
        if (sensorData.userId === userId) {
            const moistureValue = sensorData.moistureValue;
            const locDat = sensorData.locationName;

            let statusText;
            let statusClass = '';

            // Define status and status class based on moisture value
            if (moistureValue < 30) {
                statusText = 'Soil is Dry';
                statusClass = 'text-white';
            } else if (moistureValue < 45) {
                statusText = 'Soil is Moist';
                statusClass = 'text-white';
            } else if (moistureValue < 60) {
                statusText = 'Soil is Damp';
                statusClass = 'text-white';
            } else {
                statusText = 'Soil is Wet';
                statusClass = 'text-white';
            }

            let $card = $container.find(`.card[data-location="${locDat}"]`);

            if ($card.length) {
                // Update the percentage, status text, and background gradient
                $card.find('.percentage').text(`${moistureValue}%`);
                $card.find('.status-text').text(statusText);
                $card.find('.status-text').attr('class', `status-text ${statusClass}`); // Update the text class
                $card.css('background', `linear-gradient(${getGradient(moistureValue)})`); // Update the background
            } else {
                // Create a new card with the proper gradient and text class
                $card = $(`
                    <div class="card mb-3 p-2 shadow-none" data-location="${locDat}" style="border-radius: 20px; background: linear-gradient(${getGradient(moistureValue)});">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="location-name mb-2">${locDat}</h5>
                                <p class="action-text text-muted">No Action Needed</p>
                            </div>
                            <div class="d-flex flex-column justify-content-center">
                                <h1 class="percentage" style="font-weight: bold; color: #fff;">${moistureValue}%</h1>
                                <span class="status-text ${statusClass}" style="font-size: 16px;">${statusText}</span>
                            </div>
                        </div>
                    </div>
                `);

                $container.append($card);
            }

            // Smooth update animation
            $card.find('.percentage').css({
                'transition': 'all 1s ease-in-out'
            });
        }
    });
});


$(document).ready(function() {

let customPlantID = '';

const plantsTable = $('#plantsTable').DataTable({
        "paging": true,
        "searching": true,
        "lengthChange": false,
        "pageLength": 5,
        "processing": true,
        "serverSide": false, // Change this to true if you implement server-side processing
        "ajax": {
            "url": "/plants", // Ensure this endpoint returns all plants data
            "type": "GET",
            "dataSrc": function(json) {
                return json.plants || [];
            }
        },
        "columns": [
            { 
                "data": "image",
                "render": function(data) {
                    return '<img src="' + data + '" alt="" width="70px">';
                }
            },
            { "data": "name" },
            { 
                "data": "plantingDate",
                "render": function(data) {
                    return new Date(data).toLocaleDateString('en-GB', {day: '2-digit', month: '2-digit', year: 'numeric'});
                }
            },
            { "data": "status" },
            {
                "data": "customId",
                "render": function(data) {
                    return '<button class="btn btn-primary view-plant" data-custom-id="' + data + '">View</button>';
                }
            }
        ]
    });

    $('.complete-task-btn').on('click', function() {
            const taskId = $(this).data('id');
            const $taskItem = $(this).closest('li');

            $.ajax({
                url: '/tasks/complete',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ taskId: taskId }),
                success: function(response) {
                    // Show the success notification
                    $('#successTaskNotification').removeClass('d-none');

                    // Remove the task item or mark it as completed in some way
                    $taskItem.remove();

                    // Hide the notification after 3 seconds
                    setTimeout(() => {
                        $('#successTaskNotification').addClass('d-none');
                    }, 3000);
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        });

    
    $('#harvestButton').click(function(e) {
        e.preventDefault();

        const harvestQuality = $('#harvestStatus').val();
        if (!harvestQuality) {
            alert('Please select a harvest quality.');
            return;
        }

        // Store the harvest quality for use in the confirmation handler
        $('#harvestConfirmationModal').data('quality', harvestQuality);
        $('#harvestConfirmationModal').modal('show');
    });

    // Handle the confirmation when the user clicks "Yes, Harvest"
    $('#confirmHarvestButton').click(function() {
        const harvestQuality = $('#harvestConfirmationModal').data('quality');

        // Make the AJAX call
        $.ajax({
            url: `/plant/harvest/${customPlantID}`,
            method: 'POST',
            data: { harvestStatus: harvestQuality },
            success: function(response) {
                $('#harvestConfirmationModal').modal('hide');
                $('#plantDetailsModal').modal('hide');
                if (response.success) {
                     // Show the overlay and the success notification
                     $('#overlay').fadeIn();
                    const $notification = $('#successHarvestNotification');
                    $notification.removeClass('d-none').addClass('show');

                    // Hide the notification and overlay after 3 seconds
                    setTimeout(() => {
                        $notification.removeClass('show').addClass('d-none');
                        $('#overlay').fadeOut();
                    }, 1500);
                    
                    // Reset the harvest form
                    $('#harvestStatus').val('');
                    $('#harvestButton').prop('disabled', false).text('Harvest');

                    // Reset the "Plant Died" select dropdown and button
                    $('#plantDied').val('');  // Reset select to default option
                    $('#plantDiedButton').prop('disabled', false).text('Plant Died');  // Re-enable button and reset text

                    updatePlantsTable(); // Update the table after harvest
                } else {
                    alert('Failed to harvest plant.');
                }
            },
            error: function(xhr, status, error) {
                console.error('Error harvesting plant:', status, error);
                alert('Error processing the request. Please check the console for details.');
                $('#harvestButton').prop('disabled', false).text('Harvest');
            }
        });
    });
$('#plantDiedButton').click(function(e) {
        e.preventDefault(); // Prevent default form action

        const reasonForDying = $('#plantDied').val();
        if (!reasonForDying) {
            alert('Please select a reason for plant death.');
            return;
        }

        // Store the reason and customPlantID for use in the confirmation handler
        $('#confirmationModal').data('reason', reasonForDying);
        $('#confirmationModal').modal('show');
    });

    // Handle the confirmation when the user clicks "Yes, Proceed"
    $('#confirmPlantDiedButton').click(function() {
    const reasonForDying = $('#confirmationModal').data('reason');

    $.ajax({
        url: `/plant/died/${customPlantID}`,
        method: 'POST',
        data: { plantDied: reasonForDying },
        success: function(response) {
            $('#confirmationModal').modal('hide');
            if (response.success) {
                // Show success notification
                const notification = $('#successNotification');
                notification.text('Plant status updated as died!').removeClass('d-none').fadeIn(300);
                setTimeout(function() {
                    notification.fadeOut(300, function() {
                        notification.addClass('d-none');
                    });
                }, 3000);

                // Reset the "Plant Died" select dropdown and button
                $('#plantDied').val('');  // Reset select to default option
                $('#plantDiedButton').prop('disabled', false).text('Plant Died');  // Re-enable button and reset text

                 // Reset the harvest form
                 $('#harvestStatus').val('');
                    $('#harvestButton').prop('disabled', false).text('Harvest');

                updatePlantsTable(); // Update the table after plant status is updated

                // Close the plant details modal after a short delay
                setTimeout(function() {
                    $('#plantDetailsModal').modal('hide');
                }, 1000);  // Adjust the delay as needed
            } else {
                alert('Failed to update plant status.');
            }
        },
        error: function(xhr, status, error) {
            console.error('Error updating plant status:', status, error);
            alert('Error processing the request. Please check the console for details.');
        }
    });
});


  // Use event delegation for the "View" button click event
  $('#plantsTable').on('click', '.view-plant', function() {
        const customId = $(this).data('custom-id');
        fetchPlantDetails(customId);
    });

    function fetchPlantDetails(customId) {
        $.ajax({
            url: `/plant/${customId}`,
            method: 'GET',
            success: function(response) {
                if (response.success) {
                    const plant = response.plant;
                    // Fill the modal with plant data
                    customPlantID = customId;
                    $('#plantName').attr('value',plant.name);
                    $('#plantHarvestTime').text(new Date(plant.estimatedHarvestTime).toLocaleDateString());
                    $('#methodOfPlanting').attr('value',plant.methodOfPlanting);
                    $('#plantLocation').attr('value',plant.location ? plant.location.name : 'N/A');
                    $('#plantGrowthStage').text(plant.growthStage);
                    $('#plantStatus').text(plant.status);
                    $('#plantImage').attr('src', plant.image);
                    $("#datePlanted").attr('value',new Date(plant.plantingDate).toLocaleDateString('en-GB', { month: 'long', day: '2-digit', year: 'numeric'}));

                    // Calculate and update progress bar
                    updateProgressBar(plant.plantingDate, plant.estimatedHarvestTime);

                    // Show the modal
                    $('#plantDetailsModal').modal('show');
                } else {
                    alert('Plant not found!');
                }
            },
            error: function() {
                alert('Error fetching plant details.');
            }
        });
    }

    function updateProgressBar(plantingDate, harvestDate) {
        const plantingDateObj = new Date(plantingDate);
        const harvestDateObj = new Date(harvestDate);
        const today = new Date();

        const totalDuration = harvestDateObj - plantingDateObj;
        const elapsedDuration = today - plantingDateObj;

        let progressPercentage = (elapsedDuration / totalDuration) * 100;
        progressPercentage = Math.max(0, Math.min(progressPercentage, 100));

        $('#growthProgressBar').css('width', progressPercentage + '%');
        $('#growthProgressBar').attr('aria-valuenow', progressPercentage);
        $('#growthProgressBar').text(Math.round(progressPercentage) + '%');
    }

    function updatePlantsTable() {
    $.ajax({
        url: '/plants', // The endpoint to fetch plant data
        method: 'GET',
        success: function(response) {
            if (response.success) {
                const plants = response.plants;
                const tableBody = $('#plantsTable tbody');
                
                // Destroy existing DataTable instance
                if ($.fn.DataTable.isDataTable('#plantsTable')) {
                    $('#plantsTable').DataTable().destroy();
                }
                
                // Clear existing rows
                tableBody.empty();

                // Add new rows
                plants.forEach(plant => {
                    const row = `
                        <tr>
                            <td><img src="${plant.image}" alt="" width="70px"></td>
                            <td>${plant.name}</td>
                            <td>${new Date(plant.plantingDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}</td>
                            <td>${plant.status}</td>
                            <td>
                                <button class="btn btn-primary view-plant" data-custom-id="${plant.customId}">View</button>
                            </td>
                        </tr>
                    `;
                    tableBody.append(row);
                });

                // Reinitialize DataTable
                $('#plantsTable').DataTable({
                    "paging": true,   
                    "searching": true,   
                    "lengthChange": false,
                    "pageLength": 5
                });
            } else {
                alert('Failed to fetch updated plant data.');
            }
        },
        error: function() {
            alert('Error updating the plant table.');
        }
    });
}


    
});


function getGradient(moistureValue) {
    if (moistureValue < 30) {
        return 'to bottom right, rgba(220, 53, 69, 1) 35%, rgba(255, 255, 255, 0) 100%';
    } else if (moistureValue < 45) {
        return 'to bottom right, rgba(255, 193, 7, 1) 35%, rgba(255, 255, 255, 0) 100%'; 
    } else if (moistureValue < 60) {
        return 'to bottom right, rgba(67, 181, 229, 1) 35%, rgba(255, 255, 255, 0) 100%'; 
    } else {
        return 'to bottom right, rgba(40, 167, 69, 1) 35%, rgba(255, 255, 255, 0) 100%'; 
    }
}

</script>
